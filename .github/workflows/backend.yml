name: Backend CI/CD - GCP

on:
  push:
    branches: [ main ]
    paths:
      - 'stocks-backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'stocks-backend/**'

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  AR_REPO: ${{ vars.ARTIFACT_REGISTRY_REPO || 'stocks-backend' }}
  SERVICE: stocks-backend-service
  IMAGE_NAME: stocks-backend
  JAVA_VERSION: '21'

jobs:
  # ==========================================
  # JOB 1: Tests y validaciones
  # ==========================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: stocks-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Run Maven tests
        run: ./mvnw -B verify

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: stocks-backend/target/surefire-reports/

  # ==========================================
  # JOB 2: Build y Deploy (solo en push a main)
  # ==========================================
  build-and-deploy:
    name: Build & Deploy to GCP
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        shell: bash
        working-directory: stocks-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Authenticate to GCP (Workload Identity Federation)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
        working-directory: .

      - name: Build Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
          
          docker build \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            --tag "${IMAGE_URI}" \
            --tag "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:latest" \
            .

      - name: Push Docker image
        run: |
          docker push "${{ env.IMAGE_URI }}"
          docker push "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:latest"

      - name: Get image digest
        run: |
          DIGEST=$(gcloud artifacts docker images describe "${{ env.IMAGE_URI }}" --format='value(image_summary.digest)')
          echo "IMAGE_URI_DIGEST=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}@${DIGEST}" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        working-directory: .
        run: |
          gcloud run deploy "${{ env.SERVICE }}" \
            --region "${{ env.REGION }}" \
            --image "${{ env.IMAGE_URI_DIGEST }}" \
            --platform managed \
            --allow-unauthenticated \
            --service-account "run-backend-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 300 \
            --concurrency 80 \
            --port 8080 \
            --set-env-vars "SPRING_PROFILES_ACTIVE=prod,DDL_AUTO=validate,SHOW_SQL=false,HEALTH_DETAILS=never" \
            --set-secrets "SPRING_DATASOURCE_URL=DB_URL:latest,SPRING_DATASOURCE_USERNAME=DB_USERNAME:latest,SPRING_DATASOURCE_PASSWORD=DB_PASSWORD:latest" \
            --labels "app=stocks-backend,env=production,managed-by=github-actions"

      - name: Verify deployment health
        run: |
          SERVICE_URL=$(gcloud run services describe "${{ env.SERVICE }}" \
            --region "${{ env.REGION }}" \
            --format='value(status.url)')
          
          echo "Service URL: ${SERVICE_URL}"
          
          # Esperar 30 segundos para que el servicio est√© listo
          sleep 30
          
          # Verificar health endpoint
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${SERVICE_URL}/actuator/health")
          
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "‚úÖ Health check passed (HTTP ${HTTP_CODE})"
          else
            echo "‚ùå Health check failed (HTTP ${HTTP_CODE})"
            exit 1
          fi

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Deployment successful!"
          echo "üì¶ Image: ${{ env.IMAGE_URI_DIGEST }}"
          echo "üåê Service: ${{ env.SERVICE }}"
